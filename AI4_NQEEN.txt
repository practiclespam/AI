def solve_n_queens(n):
    solution = []

    def backtrack(board, col):
        # Base case: All queens have been placed, add the solution to the list
        if col == n:
            solution.append([list(row) for row in board])
            return True

        # Try placing a queen in each row of the current column
        for row in range(n):
            if is_safe(board, row, col):
                # Place the queen
                board[row][col] = 1

                # Recursively backtrack to the next column
                if backtrack(board, col + 1):
                    return True

                # If no solution found, remove the queen and continue exploring other rows
                board[row][col] = 0

        # No safe position found, backtrack to the previous column
        return False

    def is_safe(board, row, col):
        # Check if placing a queen at (row, col) is safe

        # Check if there is any queen in the same column
        for i in range(col):
            if board[row][i] == 1:
                return False

        # Check the upper diagonal
        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
            if board[i][j] == 1:
                return False

        # Check the lower diagonal
        for i, j in zip(range(row, n, 1), range(col, -1, -1)):
            if board[i][j] == 1:
                return False

        # Safe to place a queen at (row, col)
        return True

    # Create an empty chessboard
    board = [[0] * n for _ in range(n)]

    # Start backtracking from the first column (col=0)
    backtrack(board, 0)

    return solution


# Example usage for n-queens problem
n = 4
solution = solve_n_queens(n)

if solution:
    print("Solution found:")
    for row in solution:
        for col in row:
            print(col)
        print()
else:
    print("No solution found.")